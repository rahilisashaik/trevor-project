(function(){
  var doc, opts, path, whisper, run, allTasks, ref$, loadConfig, findLocalConfig, environmentFor, defaultEnvironment, configure, showVersion, showHelp, showUsage, args, pkgMeta, task, taskArgs, dir, env, slice$ = [].slice;
  doc = 'Whisper --- A task-based automation app. Leiningen style!\n\nUsage:\n  whisper <task> [<args>...] [options]';
  opts = 'Options:\n  -v, --version           Displays the version and exits.\n  -h, --help              Displays this screen and exits.\n  -d, --directory=<dir>   Directory containing the .whisper to load.\n  -e, --env=<kind>        Defines the configuration environment [default: *].';
  path = require('path');
  whisper = require('./');
  run = require('./runner').run;
  allTasks = require('./tasks').allTasks;
  ref$ = require('./config'), loadConfig = ref$.loadConfig, findLocalConfig = ref$.findLocalConfig;
  ref$ = require('./environment'), environmentFor = ref$.environmentFor, defaultEnvironment = ref$.defaultEnvironment, configure = ref$.configure;
  showVersion = function(version){
    return console.log("whisper " + version);
  };
  showHelp = function(){
    return console.log(doc + '\n\n' + opts);
  };
  showUsage = function(env){
    console.log(doc + '\n');
    return run(env, 'list', []);
  };
  args = require('optimist').options('v', {
    alias: 'version'
  }).options('h', {
    alias: 'help'
  }).options('d', {
    alias: 'directory'
  }).options('e', {
    alias: 'env',
    'default': '*'
  }).boolean('v').boolean('h').string('f').string('e').argv;
  pkgMeta = require('../package');
  configure('*', {
    whisper: args
  });
  task = args._.shift();
  taskArgs = args._;
  dir = args.directory || '.';
  (function(projectRoot){
    if (projectRoot) {
      process.chdir(path.dirname(projectRoot));
    }
  }.call(this, findLocalConfig(dir)));
  require('./core')(whisper);
  loadConfig(dir).forEach(function(config){
    return config(whisper);
  });
  env = args.env
    ? environmentFor(args.env)
    : defaultEnvironment();
  switch (false) {
  case !args.version:
    showVersion(pkgMeta.version);
    break;
  case !args.help:
    showHelp();
    break;
  case !task:
    run.apply(null, [env, task].concat(slice$.call(taskArgs)));
    break;
  default:
    showUsage(env);
  }
}).call(this);
