(function(){
  var fs, path, makeError, configNotFoundE, invalidConfigE, home, read, existsP, callableP, rootP, findLocalConfig, findRootConfig, findConfig, loadSingleConfig, loadConfig;
  fs = require('fs');
  path = require('path');
  makeError = require('flaw');
  configNotFoundE = function(initial){
    return makeError('<config-not-found-e>', "A configuration file couldn't be found above \"" + initial + "\"");
  };
  invalidConfigE = function(name){
    return makeError('<invalid-config-e>', ("The configuration file \"" + name + "\" doesn't implement the") + "configuration interface.");
  };
  home = (function(env){
    switch (process.platform) {
    case 'win32':
      return env.USERPROFILE || env.HOMEDRIVE + env.HOMEPATH;
    default:
      return env.HOME;
    }
  }.call(this, process.env));
  read = function(name){
    return fs.readFileSync(name, 'utf-8');
  };
  existsP = fs.existsSync;
  callableP = function(it){
    return typeof it === 'function';
  };
  rootP = function(dir){
    return path.resolve(dir) === path.resolve('/');
  };
  findLocalConfig = function(dir, initial){
    var whisperFile, dirAbove;
    initial == null && (initial = dir);
    whisperFile = path.resolve(dir, '.whisper');
    dirAbove = path.resolve(dir, '..');
    switch (false) {
    case !existsP(whisperFile):
      return whisperFile;
    case !rootP(dirAbove):
      return null;
    default:
      return findLocalConfig(dirAbove, initial);
    }
  };
  findRootConfig = function(){
    var whisperDir, whisperFile;
    whisperDir = path.resolve(home, '.whisper.d', '.whisper');
    whisperFile = path.resolve(home, '.whisper');
    switch (false) {
    case !existsP(whisperDir):
      return whisperDir;
    case !existsP(whisperFile):
      return whisperFile;
    default:
      return null;
    }
  };
  findConfig = function(dir){
    return [findRootConfig(), findLocalConfig(dir)].filter(Boolean);
  };
  loadSingleConfig = function(name){
    var module;
    module = require(name);
    if (!callableP(module)) {
      throw invalidConfigE(name);
    }
    return module;
  };
  loadConfig = function(dir){
    return findConfig(dir).map(loadSingleConfig);
  };
  module.exports = {
    findLocalConfig: findLocalConfig,
    findRootConfig: findRootConfig,
    findConfig: findConfig,
    loadSingleConfig: loadSingleConfig,
    loadConfig: loadConfig
  };
}).call(this);
